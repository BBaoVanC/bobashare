searchState.loadedDescShard("askama", 0, "Askama implements a type-safe compiler for Jinja-like …\nan error raised by using <code>?</code> in a template\nObject-safe wrapper trait around <code>Template</code> implementers\nThe template’s extension, if provided\nContains the error value\naskama error type\nformatting error\nThe MIME type (Content-Type) of the data that gets …\nContains the success value\nProvides a rough estimate of the expanded length of the …\nMain <code>Template</code> trait; implementations are generally derived\nHelper method which allocates a new <code>String</code> and renders …\nRenders the template to the given <code>writer</code> fmt buffer\nRenders the template to the given <code>writer</code> io buffer\nHelper function to inspect the template’s extension\nModule for built-in filter functions\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe MIME type (Content-Type) of the data that gets …\nHelper method which allocates a new <code>String</code> and renders …\nRenders the template to the given <code>writer</code> fmt buffer\nOld build script helper to rebuild crates if contained …\nProvides a conservative estimate of the expanded length of …\nRenders the template to the given <code>writer</code> io buffer\nAbsolute value\nCapitalize a value. The first character will be uppercase, …\nCenters the value in a field of a given width\nEscapes strings according to the escape mode.\nReturns adequate string representation (in KB, ..) of …\nFormats arguments according to the specified format\nFormats arguments according to the specified format\nIndent lines with <code>width</code> spaces\nCasts number to f64\nCasts number to isize\nJoins iterable into a string separated by provided argument\nReplaces line breaks in plain text with appropriate HTML\nConverts all newlines in a piece of plain text to HTML …\nConverts to lowercase\nAlias for the <code>lower()</code> filter\nReplaces only paragraph breaks in plain text with …\nMarks a string (or other <code>Display</code> type) as safe\nStrip leading and trailing whitespace\nLimit string length, appends ‘…’ if truncated\nConverts to uppercase\nAlias for the <code>upper()</code> filter\nPercent-encodes the argument for safe use in URI; does not …\nPercent-encodes the argument for safe use in URI; encodes <code>/</code>…\nCount the words in that string\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")