searchState.loadedDescShard("getopts", 0, "Simple getopt alternative.\nThe option requires an argument but none was passed.\nContains the error value\nThe type returned when the command line does not conform …\nFlags and “free” arguments can be freely inter-mixed.\nDescribes whether an option has an argument.\nThe result of checking command line arguments. Contains a …\nThe option argument is optional.\nThe option occurs zero or more times.\nThe option takes no argument.\nDescribes how often an option may occur.\nContains the success value\nA single occurrence option is being used multiple times.\nA required option is not present.\nThe option occurs at most once.\nA description of the options that a program can handle.\nWhat parsing style to use when parsing arguments.\nThe option occurs once.\nThe result of parsing a command line with a set of options.\nAs soon as a “free” argument (i.e. non-flag) is …\nThere’s an argument being passed to a non-argument …\nThe passed option is not declared among the possible …\nThe option requires an argument.\nFree string fragments\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet or clear “long options only” mode.\nCreate a blank set of options.\nCreate a generic option group, stating all parameters …\nReturns the number of times an option was matched.\nReturns the matching string, a default, or <code>None</code>.\nReturns true if an option was defined\nReturns some matching value or <code>None</code>.\nReturns a matching value or default.\nReturns a vector of all the positions in which an option …\nReturns true if an option was matched.\nReturns the string argument supplied to a matching option …\nReturns a vector of the arguments provided to all matches …\nReturns a vector of the arguments provided to all matches …\nCreate a long option that is optional and does not take an …\nCreate a long option that can occur more than once and …\nCreate a long option that is optional and takes an …\nCreate a long option that is optional, takes an argument, …\nCreate a long option that is optional and takes an …\nReturns true if any of several options were matched.\nReturns the string argument supplied to one of several …\nParse command line arguments according to the provided …\nSet the parsing style.\nCreate a long option that is required and takes an …\nDerive a short one-line usage summary from a set of long …\nDerive a formatted message from a set of options.\nDerive a custom formatted message from a set of options. …")