searchState.loadedDescShard("bobashare", 0, "A simple ephemeral file sharing service. This crate …\nGenerate a randomized (alphanumeric) ID for an upload with …\nMethods to serialize <code>Upload</code>s using <code>serde_json</code>\nModules that handle storing uploaded files and serialized …\nThe latest upload metadata version\nErrors that could occur while migrating an upload (during …\nErrors when migrating from <code>UploadV0</code>\nerror parsing <code>mimetype</code> field\nunknown upload version\nAll the versions of upload metadata\nerror migrating from V0\ndate the upload was created\nsecret key needed to delete the upload before its expiry\ndate the upload expires, or <code>None</code> if never\nname of the uploaded file\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert an upload into the latest metadata version\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert <code>UploadMetadata</code> into an <code>Upload</code>, migrating it if …\nMIME type of the uploaded file\nVersion 1\nA serializable form of <code>Upload</code>, version 1\ndate the upload was created\nsecret key needed to delete the upload before its expiry\ndate the upload expires, or <code>None</code> if never\nname of the uploaded file\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMIME type of the uploaded file\nA backend where uploads are stored as files on disk\nMethods to create a handle (RAII guard) to interact with …\nType that stores information (metadata) about an upload, …\nan upload with the requested name already exists\nErrors when running a repository cleanup task\nerror creating directory for file backend\nerror creating parent directory for the upload\nerror creating lock file\nerror creating metadata file\nErrors when creating an upload in a file backend\nerror creating file for upload contents\nerror deleting upload directory\nerror deleting upload file\nerror deleting metadata file\nErrors when deleting an upload stored in a file backend\nerror deserializing upload metadata\nthe upload has expired\nA directory on disk which is used to store uploads\nthe upload is invalid and should be deleted\nthe upload metadata isn’t valid or cannot be deserialized\nReasons why an upload might be invalid and need to be …\nthe upload is locked\nthe upload is locked\nthe upload is locked\nerror while migrating upload metadata to latest version\nfailed to migrate metadata\nthe upload is missing a file\nthe upload is missing metadata.json\nErrors when creating a new <code>FileBackend</code>\nerror reading next directory entry\nthe file <code>{0}</code> is not a directory\nthe upload was not found\nan upload at the specified id was not found\nerror while opening upload file\nfailed to open metadata file\nErrors when opening an upload stored in a file backend\nerror reading directory\nerror checking if backend path is directory\nerror while reading metadata file\nthe upload is valid\nCritical errors when validating an upload that mean we can…\nValidate all the uploads in the repository and delete ones …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a file backend, creating the directory if it …\ndoes not check if the upload is expired, do that yourself\npath of the directory containing all uploads\nerror flushing upload file to disk\nerror flushing metadata to disk\nErrors when flushing the upload metadata to disk\nerror removing lock file\nerror while serializing with serde_json\nMake sure to call <code>Self::flush</code> or else the metadata won’t …\nerror writing metadata to file\nConsume the handle, and just delete the lock file. Note …\nreference to the open uploaded file\npath of the uploaded file\nConsume the handle, gracefully close the uploaded file, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\ninfo about the upload, see <code>Upload</code>\npath to the upload directory\nMetadata about an upload\ndate the upload was created\nsecret key needed to delete the upload before it expires\ndate the upload expires, or <code>None</code> if never\nname of the uploaded file\nReturns the argument unchanged.\nID of the upload\nCalls <code>U::from(self)</code>.\nCheck whether or not the upload is expired.\nMIME type of the uploaded file")