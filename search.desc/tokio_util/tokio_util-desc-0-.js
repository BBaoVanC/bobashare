searchState.loadedDescShard("tokio_util", 0, "Utilities for working with Tokio.\nModule defining an Either type.\nAn extension trait for Futures that provides a variety of …\nHelpers for IO related tasks.\nSynchronization primitives\nCombines two different futures, streams, or sinks having …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA trait which contains a variety of convenient adapters …\nSimilar to <code>CancellationToken::run_until_cancelled</code>, but …\nSimilar to <code>CancellationToken::run_until_cancelled_owned</code>, …\nA helper that wraps a <code>Sink</code><code>&lt;</code><code>Bytes</code><code>&gt;</code> and converts it into a …\nAn adapter that lets you inspect the data that’s being …\nAn adapter that lets you inspect the data that’s being …\nConvert an <code>AsyncRead</code> into a <code>Stream</code> of byte chunks.\nConvert a <code>Sink</code> of byte chunks into an <code>AsyncWrite</code>.\nConvert a <code>Stream</code> of byte chunks into an <code>AsyncRead</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a mutable reference to the underlying stream.\nGets a mutable reference to the underlying sink.\nGets a mutable reference to the underlying sink.\nGets a pinned mutable reference to the underlying stream.\nGets a reference to the underlying stream.\nGets a reference to the underlying sink.\nGets a reference to the underlying sink.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this <code>BufWriter</code>, returning the underlying stream.\nConsumes this <code>SinkWriter</code>, returning the underlying sink.\nConsumes the <code>InspectWriter</code>, returning the wrapped writer\nConsumes the <code>InspectReader</code>, returning the wrapped reader\nConsumes this <code>CopyToBytes</code>, returning the underlying sink.\nConsumes this <code>StreamReader</code>, returning a Tuple consisting …\nConvert a stream of byte chunks into an <code>AsyncRead</code>.\nCreates a new <code>SinkWriter</code>.\nConvert an <code>AsyncRead</code> into a <code>Stream</code> with item type …\nCreate a new <code>InspectWriter</code>, wrapping <code>write</code> and calling <code>f</code> …\nCreate a new <code>InspectReader</code>, wrapping <code>reader</code> and calling <code>f</code> …\nCreates a new <code>CopyToBytes</code>.\nTry to read data from an <code>AsyncRead</code> into an implementer of …\nTry to write data from an implementer of the <code>Buf</code> trait to …\nRead data from an <code>AsyncRead</code> into an implementer of the …\nConvert an <code>AsyncRead</code> into a <code>Stream</code> with item type …\nA token which can be used to signal a cancellation request …\nA wrapper for cancellation token which automatically …\nA wrapper for cancellation token which automatically …\nA wrapper around <code>Semaphore</code> that provides a <code>poll_acquire</code> …\nError returned by the <code>PollSender</code> when the channel is …\nA wrapper around <code>mpsc::Sender</code> that can be polled.\nA reusable <code>Pin&lt;Box&lt;dyn Future&lt;Output = T&gt; + Send + &#39;a&gt;&gt;</code>.\nA Future that is resolved once the corresponding …\nA Future that is resolved once the corresponding …\nAborts the current in-progress send, if any.\nAdds <code>n</code> new permits to the semaphore.\nReturns the current number of available permits.\nCancel the <code>CancellationToken</code> and all child tokens which …\nReturns a <code>Future</code> that gets fulfilled when cancellation is …\nReturns a <code>Future</code> that gets fulfilled when cancellation is …\nCreates a <code>CancellationToken</code> which will get cancelled …\nCreates a clone of the <code>CancellationToken</code> which will get …\nClones this <code>PollSender</code>.\nObtain a clone of the inner semaphore.\nCloses the semaphore.\nCloses this sender.\nReturns stored cancellation token and removes this drop …\nReturns stored cancellation token and removes this drop …\nCreates a <code>DropGuard</code> for this token.\nCreates a <code>DropGuardRef</code> for this token.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a pinned reference to the underlying future.\nGets a reference to the <code>Sender</code> of the underlying channel.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet back the inner semaphore.\nConsumes the stored value, if any.\nReturns <code>true</code> if the <code>CancellationToken</code> is cancelled.\nChecks whether this sender is been closed.\nCreates a new <code>CancellationToken</code> in the non-cancelled state.\nCreate a new <code>PollSemaphore</code>.\nCreate a new <code>ReusableBoxFuture&lt;T&gt;</code> containing the provided …\nCreates a new <code>PollSender</code>.\nPoll the future stored inside this box.\nPoll the future stored inside this box.\nPoll to acquire a permit from the semaphore.\nPoll to acquire many permits from the semaphore.\nAttempts to prepare the sender to receive a value.\nRuns a future to completion and returns its result wrapped …\nRuns a future to completion and returns its result wrapped …\nSends an item to the channel.\nReplace the future currently stored in this box.\nReplace the future currently stored in this box.")