searchState.loadedDescShard("spin", 0, "This crate provides spin-based versions of the primitives …\nA primitive that synchronizes the execution of multiple …\nLocks that have the same behaviour as a mutex.\nStrategies that determine the behaviour of locks when …\nA spin-based lock providing mutually exclusive access to …\nA generic guard that will protect some data access and …\nForce unlock this <code>Mutex</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a mutable reference to the underlying data.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this <code>Mutex</code> and unwraps the underlying data.\nReturns <code>true</code> if the lock is currently held.\nLeak the lock guard, yielding a mutable reference to the …\nLocks the <code>Mutex</code> and returns a guard that permits access to …\nCreates a new <code>Mutex</code> wrapping the supplied data.\nA naïve spinning mutex.\nTry to lock this <code>Mutex</code>, returning a lock guard if …\nA spin lock providing mutually exclusive access to data.\nA guard that provides mutable data access.\nReturns a mutable pointer to the underlying data.\nThe dropping of the MutexGuard will release the lock it …\nForce unlock this <code>SpinMutex</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a mutable reference to the underlying data.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this <code>SpinMutex</code> and unwraps the underlying data.\nReturns <code>true</code> if the lock is currently held.\nLeak the lock guard, yielding a mutable reference to the …\nLocks the <code>SpinMutex</code> and returns a guard that permits …\nCreates a new <code>SpinMutex</code> wrapping the supplied data.\nTry to lock this <code>SpinMutex</code>, returning a lock guard if …\nA strategy that rapidly spins, without telling the CPU to …\nA trait implemented by spinning relax strategies.\nA strategy that rapidly spins while informing the CPU that …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPerform the relaxing operation during a period of …")