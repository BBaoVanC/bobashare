searchState.loadedDescShard("axum_extra", 0, "Extra utilities for <code>axum</code>.\nExtractor and response that works with typed header values …\nAdditional bodies.\n<code>Either*</code> types for combining extractors or responses into a …\nAdditional extractors.\nReturns the argument unchanged.\nAdditional handler utilities.\nCalls <code>U::from(self)</code>.\nAdditional middleware utilities.\nAdditional types for generating responses.\nAdditional types for defining routes.\nExtractor and response for typed headers.\nThis macro aborts compilation if the path is invalid.\nCombines two extractors or responses into a single type.\nCombines three extractors or responses into a single type.\nCombines four extractors or responses into a single type.\nCombines five extractors or responses into a single type.\nCombines six extractors or responses into a single type.\nCombines seven extractors or responses into a single type.\nCombines eight extractors or responses into a single type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCache results of other extractors.\nExtractor that resolves the host of the request.\nExtractor that extracts path arguments the same way as <code>Path</code>…\nExtractor for customizing extractor rejections\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the wrapped extractor\nRejection response types.\nRejection type used if the <code>Host</code> extractor is unable to …\nRejection used for <code>Host</code>.\nGet the response body text used for this rejection.\nGet the response body text used for this rejection.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the status code used for this rejection.\nGet the status code used for this rejection.\nThe type of future calling this handler returns.\nTrait for async functions that can be used to handle …\nA <code>Handler</code> created from a <code>HandlerCallWithExtractors</code>.\n<code>Handler</code> that runs one <code>Handler</code> and if that rejects it’ll …\nCall the handler with the extracted inputs.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert this <code>HandlerCallWithExtractors</code> into <code>Handler</code>.\nChain two handlers together, running the second one if the …\nConvert an <code>Option&lt;Layer&gt;</code> into a <code>Layer</code>.\nA CSS response.\nA JavaScript response.\nA WASM response.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA resource which defines a set of conventional CRUD routes.\nExtension trait that adds additional methods to <code>Router</code>.\nAdd a handler at <code>POST /{resource_name}</code>.\nAdd a handler at …\nAdd a handler at …\nReturns the argument unchanged.\nAdd a handler at <code>GET /{resource_name}</code>.\nCalls <code>U::from(self)</code>.\nCreate a <code>Resource</code> with the given name.\nAdd a handler at <code>GET /{resource_name}/new</code>.\nAdd another route to the router with an additional “…\nAdd another route to the router with an additional “…\nAdd a handler at <code>GET /&lt;resource_name&gt;/{&lt;resource_name&gt;_id}</code>.\nAdd a handler at …\nAn error occurred when parsing the header from the HTTP …\nThe header was missing from the HTTP request\nExtractor and response that works with typed header values …\nRejection used for <code>TypedHeader</code>.\nAdditional information regarding a <code>TypedHeaderRejection</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the typed header rejection reason is …\nReturns <code>true</code> if the typed header rejection reason is …\nName of the header that caused the rejection\nReason why the header extraction has failed")